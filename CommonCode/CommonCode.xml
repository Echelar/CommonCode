<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonCode</name>
    </assembly>
    <members>
        <member name="T:RobinHood70.CommonCode.BitReader">
            <summary>A quick hack of a class to make BitConverter act a bit more like BinaryReader.</summary>
            <remarks>There is currently almost no buffer overflow checking apart from that provided by the BitConverter calls, so those methods will simply crash if you do overflow.</remarks>
        </member>
        <member name="T:RobinHood70.CommonCode.ComparableCollection`1">
            <summary>A list collection that provides a Comparer.</summary>
            <typeparam name="T">The type of list.</typeparam>
            <seealso cref="T:System.Collections.Generic.IList`1" />
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.ComparableCollection`1"/> class.</summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.ComparableCollection`1"/> class.</summary>
            <param name="capacity">The collection capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.ComparableCollection`1"/> class.</summary>
            <param name="collection">The collection to initialize from.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="P:RobinHood70.CommonCode.ComparableCollection`1.Comparer">
            <summary>Gets the comparer for the collection.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ComparableCollection`1.Count">
            <summary>Gets the number of elements contained in the collection.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ComparableCollection`1.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ComparableCollection`1.Item(System.Int32)">
            <summary>Gets or sets the item at the specified index.</summary>
            <param name="index">The index.</param>
            <value>The item.</value>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.Add(`0)">
            <summary>Adds an item to the collection.</summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.Clear">
            <summary>Removes all items from the collection.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.Contains(`0)">
            <summary>Determines whether this instance contains the object.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns><see langword="true"/> if <paramref name="item" /> is found in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the list.</summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the list at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the collection.</summary>
            <param name="item">The object to remove from the collection.</param>
            <returns><see langword="true"/> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="item" /> is not found in the original collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ComparableCollection`1.RemoveAt(System.Int32)">
            <summary>Removes the list item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:RobinHood70.CommonCode.CsvFile">
            <summary>Reads or writes a CSV file, including tab-separated files and similar formats.</summary>
            <remarks>This class is primarily designed to handle entire files at once. <see cref="T:System.IO.TextReader"/>- and <see cref="T:System.IO.TextWriter"/>-based methods are also available to support streaming and the like.</remarks>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.AlwaysDelimitFields">
            <summary>Gets or sets a value indicating whether fields should always be delimited as text.</summary>
            <value><see langword="true"/> if fields should always be delimited; otherwise, <see langword="false"/> (in which case, delimiting is automatic as needed).</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.Count">
            <summary>Gets the number of rows currently in the file.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.DoubleUpDelimiters">
            <summary>Gets or sets a value indicating whether to double up the <see cref="P:RobinHood70.CommonCode.CsvFile.FieldDelimiter"/> character if emitted as part of the field value or use the <see cref="P:RobinHood70.CommonCode.CsvFile.EscapeCharacter"/>.</summary>
            <value>
              <see langword="true"/> if a delimiter character should be emitted twice; <see langword="false"/> if it should be escaped instead.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.EmptyFieldText">
            <summary>Gets or sets the text to emit if a field is present but is an empty string.</summary>
            <value>The text to use for empty fields.</value>
            <remarks>If this field is null, empty fields will be treated the same as null fields. If it's an empty string, two field delimiters will be emitted with nothing between them. For any other value, that value will be emitted, with field delimiters emitted (or not) as normal.</remarks>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.EscapeCharacter">
            <summary>Gets or sets the escape character.</summary>
            <value>The escape character.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.FieldDelimiter">
            <summary>Gets or sets the field delimiter.</summary>
            <value>The field delimiter. Defaults to a double-quote (<c>"</c>).</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.FieldSeparator">
            <summary>Gets or sets the field separator.</summary>
            <value>The field separator. Defaults to a comma (<c>,</c>).</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.Header">
            <summary>Gets or sets the header row.</summary>
            <value>The header row. <see langword="null"/> if there is no header row (<c>HasHeader = false</c> or there are no rows in the file).</value>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.IgnoreSurroundingWhiteSpace">
            <summary>Gets or sets a value indicating whether to ignore surrounding white space.</summary>
            <value><see langword="true"/> if leading or trailing whitespace in a field should be ignored when no delimiter is present; otherwise, <see langword="false"/>.</value>
            <remarks>When this is set to <see langword="true"/>, a row of <c>ABC, DEF</c> is treated the same as <c>ABC,DEF</c>; when false, the second value would be " DEF" rather than "DEF".</remarks>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvFile.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:RobinHood70.CommonCode.CsvRow"/> at the specified index.</summary>
            <param name="index">The index.</param>
            <value>The <see cref="T:RobinHood70.CommonCode.CsvRow"/>.</value>
            <returns>The row at the specified index.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Add(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Adds the specified field values.</summary>
            <param name="fields">The field values, converted to strings using the default ToString() method for the object.</param>
            <returns>The CsvRow that was added.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Add(System.String[])">
            <summary>Adds the specified field values.</summary>
            <param name="fields">The field values.</param>
            <returns>The CsvRow that was added.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds the specified field values.</summary>
            <param name="fields">The field values.</param>
            <returns>The CsvRow that was added.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Add(RobinHood70.CommonCode.CsvRow)">
            <summary>Adds a <see cref="T:RobinHood70.CommonCode.CsvRow"/> directly to the file.</summary>
            <param name="item">The row to add to the file.</param>
            <returns>The original <paramref name="item"/> parameter.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.AddHeader(System.String[])">
            <summary>Adds a header with the specified field names.</summary>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Clear">
            <summary>Removes all items from the file and clears the header.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.CopyTo(RobinHood70.CommonCode.CsvRow[],System.Int32)">
            <summary>Copies the rows of the file to an array, starting at a particular array index.</summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Insert(System.Int32,RobinHood70.CommonCode.CsvRow)">
            <summary>Inserts a row into the file at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The row to insert into the file.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.ReadFile(System.String,System.Boolean)">
            <summary>Reads and parses a CSV file with UTF-8 encoding.</summary>
            <param name="fileName">Name of the file.</param>
            <param name="hasHeader">Whether or not the data has a header.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.ReadFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>Reads and parses a CSV file.</summary>
            <param name="fileName">Name of the file.</param>
            <param name="hasHeader">Whether or not the data has a header.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.ReadRow(System.IO.TextReader)">
            <summary>Reads a single row from a <see cref="T:System.IO.TextReader"/>.</summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read from.</param>
            <returns>A <see cref="T:RobinHood70.CommonCode.CsvRow"/> with the field values. If names are provided and not enough fields are present to match the name count, the row will be padded with empty strings.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.ReadText(System.String,System.Boolean)">
            <summary>Reads CSV text from a string.</summary>
            <param name="txt">The CSV text.</param>
            <param name="hasHeader">Whether or not the data has a header.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.ReadText(System.IO.TextReader,System.Boolean)">
            <summary>Reads an entire file from a <see cref="T:System.IO.TextReader"/> derivative.</summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read from.</param>
            <param name="hasHeader">Whether or not the data has a header.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.Remove(RobinHood70.CommonCode.CsvRow)">
            <summary>Removes the first occurrence of a specific row from the file.</summary>
            <param name="item">The row to remove from the file.</param>
            <returns><see langword="true"/> if <paramref name="item" /> was successfully removed from the file; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="item" /> is not found in the original file.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.RemoveByValue(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>Removes a row based on an exact value match.</summary>
            <param name="values">The values to match.</param>
            <param name="removeCount">The maximum number of rows to remove. Use -1 to remove all matching rows.</param>
            <returns>True if one or more rows were removed.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.RemoveAt(System.Int32)">
            <summary>Removes the row at the specified index.</summary>
            <param name="index">The zero-based index of the row to remove.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.WriteFile(System.String)">
            <summary>Writes a CSV file to the specified file with UTF-8 encoding.</summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.WriteFile(System.String,System.Text.Encoding)">
            <summary>Writes a CSV file to the specified file.</summary>
            <param name="fileName">The name of the file.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.WriteRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Writes a row to the specified <see cref="T:System.IO.TextWriter"/> derivative.</summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> derivative to write to.</param>
            <param name="row">The values for the row. This parameter allows for any string enumeration and may thus be either plain data or a <see cref="T:RobinHood70.CommonCode.CsvRow"/>.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvFile.WriteText(System.IO.TextWriter)">
            <summary>Writes the file to the specified <see cref="T:System.IO.TextWriter"/> derivative.</summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
        </member>
        <member name="T:RobinHood70.CommonCode.CsvRow">
            <summary>Represents a single row in a <see cref="T:RobinHood70.CommonCode.CsvFile"/>.</summary>
            <remarks>Once created, the number of values in a row may not be changed.</remarks>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvRow.Count">
            <summary>Gets the number of fields in the row.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvRow.Item(System.Int32)">
            <summary>Gets or sets the field (as a <see cref="T:System.String"/>) at the specified index.</summary>
            <param name="index">The index of the field.</param>
            <returns>The field value, formatted as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:RobinHood70.CommonCode.CsvRow.Item(System.String)">
            <summary>Gets or sets the <see cref="T:System.String"/> with the specified field name.</summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value, formatted as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there are no columns with the provided field name.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.CsvRow.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.Filter">
            <summary>Represents a tristate filter, where the options are to show everything, show only the selected items, or hide the selected items.</summary>
            <remarks>This is an alias for Tristate, but is much clearer in its intent than having True/False/Unknown values.</remarks>
        </member>
        <member name="F:RobinHood70.CommonCode.Filter.Any">
            <summary>Include all results; do not filter.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.Filter.Only">
            <summary>Include only these results. Note that in cases where.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.Filter.Exclude">
            <summary>Exclude these results.</summary>
        </member>
        <member name="T:RobinHood70.CommonCode.Tristate">
            <summary>Represents a binary value which also allows for an unknown state.</summary>
            <remarks>This is used in preference to a <see cref="T:System.Nullable`1" /> due to the fact that it is both smaller and makes the code much clearer.</remarks>
        </member>
        <member name="F:RobinHood70.CommonCode.Tristate.Unknown">
            <summary>An unknown or unassigned value.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.Tristate.True">
            <summary>The value is True.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.Tristate.False">
            <summary>The value is false.</summary>
        </member>
        <member name="T:RobinHood70.CommonCode.Extensions">
            <summary>Extension methods for a variety of types.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.BString8(System.IO.BinaryReader)">
            <summary>Reads a length-prefixed string. Both length and characters should be bytes.</summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read from.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.ZString(System.IO.BinaryReader)">
            <summary>Reads a null-terminated string. Characters should be bytes.</summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read from.</param>
            <returns>The string.</returns>
            <remarks>For fixed-length strings, it's normally better to read the entire thing and then trim everything after the null. This function is intended for those cases where the length is unknown.</remarks>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.GetUniqueFlags``1(``0)">
            <summary>Gets each single-bit value of a flags enumeration.</summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="value">The flags enumeration value to enumerate.</param>
            <returns>An enumeration of every single-bit value in the specified flags enumeration.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.HasAnyFlag``1(``0,``0)">
            <summary>Determines whether or not an enum has any of the provided flags set.</summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="flagValue">The flags enumeration value to check.</param>
            <param name="values">The flag values to check.</param>
            <returns><see langword="true"/> if any of the flags in <paramref name="values"/> is set; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.IsUniqueFlag``1(``0)">
            <summary>Determines whether or not an enum represents a single-bit flag value.</summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="flagValue">The flags enumeration value to check.</param>
            <returns><see langword="true"/> if the flag value represents a single-bit value.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Adds one collection of items to another.</summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="collection">The original collection.</param>
            <param name="values">The values to be added.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds one collection of items to another.</summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="collection">The original collection.</param>
            <param name="values">The collection to be added.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Adds the items from one dictionary (or other set of key-value pairs) to another.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to add to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Convenience method to convert a dictionary to read-only.</summary>
            <typeparam name="TKey">The key-type of the <paramref name="dictionary" /> (inferred).</typeparam>
            <typeparam name="TValue">The value-type of the <paramref name="dictionary" /> (inferred).</typeparam>
            <param name="dictionary">The dictionary to convert.</param>
            <returns>A read-only dictionary based on the provided dictionary. If the input was null, an empty read-only dictionary is returned.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.First``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Gets the value of the "first" item in a dictionary.</summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="dictionary">The dictionary from which to retrieve the first value.</param>
            <returns>The first value in the enumerable, or throws an error.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The list was empty.</exception>
            <remarks>Although the current implementation of dictionaries appears to maintain insertion order, this is not guaranteed. This function should be used only to get the value from a single-entry dictionary, or to get a unspecified value from a multi-entry dictionary.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="dictionary"/> is empty.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AsReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Casts the enumerable to an IReadOnlyList if possible, or creates a new one if needed.</summary>
            <typeparam name="T">The type of the original enumerable.</typeparam>
            <param name="enumerable">The enumerable to convert.</param>
            <returns>The existing enumerable as an IReadOnlyList or a new list.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Determines whether an IEnumerable<typeparamref name="T"/> contains the specified value.</summary>
            <typeparam name="T">The type of the original enumerable.</typeparam>
            <param name="enumerable">The enumerable to convert.</param>
            <param name="value">The value to find.</param>
            <returns><see langword="true"/> if the collection contains the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether an IEnumerable<typeparamref name="T"/> contains the specified value.</summary>
            <typeparam name="T">The type of the original enumerable.</typeparam>
            <param name="enumerable">The enumerable to convert.</param>
            <param name="value">The value to find.</param>
            <param name="comparer">The equality comparer to use to make the comparison.</param>
            <returns><see langword="true"/> if the collection contains the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets the first item of the collection, or the specified default value.</summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="enumerable">The collection to enumerate.</param>
            <returns>The first item in the collection or the specified default value.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.First``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Gets the first item of the collection, or the specified default value.</summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="enumerable">The collection to enumerate.</param>
            <param name="defaultValue">The default value to use if the collection is empty.</param>
            <returns>The first item in the collection or the specified default value.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>Determines whether an IEnumerable has items.</summary>
            <param name="enumerable">The enumerable to check.</param>
            <returns><see langword="true"/> if the list is non-null and has at least one item; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The list was empty.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.ToStringInvariant(System.IFormattable)">
            <summary>Convenience method to format any IFormattable value as an invariant value.</summary>
            <param name="value">The value to format.</param>
            <returns>The value as an invariant string.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>Shuffles the specified list into a random order.</summary>
            <typeparam name="T">The list type.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Substitute``1(System.Collections.Generic.IReadOnlyDictionary{``0,``0},``0)">
            <summary>Tries to find a substitute value in a dictionary for the key provided.</summary>
            <typeparam name="T">The type for both the key and the value.</typeparam>
            <param name="dictionary">The dictionary to search.</param>
            <param name="key">The key to look for.</param>
            <returns>The substitute value if one is found; otherwise, the original key.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Substitute``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>Tries to find a substitute value in a dictionary for the key provided.</summary>
            <typeparam name="TKey">The type for the key.</typeparam>
            <typeparam name="TValue">The type for the value.</typeparam>
            <param name="dictionary">The dictionary to search.</param>
            <param name="key">The key to look for.</param>
            <param name="defaultValue">The default value to use if the key is not found.</param>
            <returns>The substitute value if one is found; otherwise, the default value.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of values to the list in the order provided.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="list">The list to add the value to.</param>
            <param name="node">The node to add the value after.</param>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of values to the list in the order provided.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="list">The list to add the value to.</param>
            <param name="node">The node to add the value Before.</param>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddAfter``1(System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>Adds a new value to the linked list.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="node">The node to add the values after.</param>
            <param name="value">The value to add.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="node"/> does not belong to a linked list.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddAfter``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of values to the list in the order provided.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="node">The node to add the values after.</param>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddBefore``1(System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>Adds a new value to the linked list.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="node">The node to add the values before.</param>
            <param name="value">The value to add.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="node"/> does not belong to a linked list.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.AddBefore``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of values to the list in the order provided.</summary>
            <typeparam name="T">The element type of the linked list.</typeparam>
            <param name="node">The node to add the values before.</param>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.Ellipsis(System.String,System.Int32)">
            <summary>Limits text to the specified maximum length.</summary>
            <param name="text">The text.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>System.String.</returns>
            <remarks>This limits only the initial string length, not the total, so the return value can have a maximum length of maxLength + 3.</remarks>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.LowerFirst(System.String)">
            <summary>Converts the first character of a string to upper-case.</summary>
            <param name="text">The string to alter.</param>
            <returns>A copy of the original string, with the first charcter converted to upper-case.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.LowerFirst(System.String,System.Globalization.CultureInfo)">
            <summary>Converts the first character of a string to upper-case.</summary>
            <param name="text">The string to alter.</param>
            <param name="culture">The culture to use for converting the first character to upper-case.</param>
            <returns>A copy of the original string, with the first charcter converted to upper-case.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.OrdinalEquals(System.String,System.String)">
            <summary>Extension shortcut to explicitly compare two strings ordinally.</summary>
            <param name="a">The string to compare.</param>
            <param name="b">The string to compare the first one with.</param>
            <returns><see langword="true"/>if the strings are identical; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.UnCamelCase(System.String)">
            <summary>Takes a camel-case text and adds spaces before each block of one or more upper-case letters.</summary>
            <param name="text">The text to convert.</param>
            <returns>The original text with spaces inserted.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.UpperFirst(System.String)">
            <summary>Converts the first character of a string to upper-case.</summary>
            <param name="text">The string to alter.</param>
            <returns>A copy of the original string, with the first charcter converted to upper-case.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Extensions.UpperFirst(System.String,System.Globalization.CultureInfo)">
            <summary>Converts the first character of a string to upper-case.</summary>
            <param name="text">The string to alter.</param>
            <param name="culture">The culture to use for converting the first character to upper-case.</param>
            <returns>A copy of the original string, with the first charcter converted to upper-case.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.StrongEventHandler`2">
            <summary>A strongly typed event handler delegate.</summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event data.</param>
        </member>
        <member name="T:RobinHood70.CommonCode.HashType">
            <summary>The hash type to return from the GetHash() functions.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.HashType.Md5">
            <summary>Message Digest 5 (MD5) hash.</summary>
        </member>
        <member name="F:RobinHood70.CommonCode.HashType.Sha1">
            <summary>Secure Hash Algorithm 1 (SHA1) hash.</summary>
        </member>
        <member name="T:RobinHood70.CommonCode.Globals">
            <summary>Global helper methods that are useful in a variety of scenarios.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Globals.DefaultRegexTimeout">
            <summary>Gets a <see cref="T:System.TimeSpan"/> that is a good general time to abort Regex operations after.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.ArgumentNull(System.String)">
            <summary>Throws an exception if the input value is null.</summary>
            <param name="name">The name of the parameter in the original method.</param>
            <exception cref="T:System.ArgumentNullException">Always thrown.</exception>
            <returns>An <see cref="T:System.ArgumentNullException"/> for the specified parameter name.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.ChainedCompareTo``1(``0,``0)">
            <summary>A CompareTo function that returns null instead of zero.</summary>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns><see langword="null"/> if the values are identical; otherwise, 1 or -1 as a normal <see cref="M:System.IComparable`1.CompareTo(`0)"/> function would.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.CurrentCulture(System.String,System.Object)">
            <summary>Convenience method so that CurrentCulture and Invariant are all in the same class for both traditional and formattable strings, and are used the same way.</summary>
            <param name="text">The text to format.</param>
            <param name="value">The value of the parameter in the <paramref name="text" /> parameter.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.CurrentCulture(System.String,System.Object,System.Object)">
            <summary>Convenience method so that CurrentCulture and Invariant are all in the same class for both traditional and formattable strings, and are used the same way.</summary>
            <param name="text">The text to format.</param>
            <param name="value1">The value of the first parameter in the <paramref name="text" /> parameter.</param>
            <param name="value2">The value of the second parameter in the <paramref name="text" /> parameter.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.CurrentCulture(System.String,System.Object,System.Object[])">
            <summary>Convenience method so that CurrentCulture and Invariant are all in the same class for both traditional and formattable strings, and are used the same way.</summary>
            <param name="text">The text to format.</param>
            <param name="firstValue">The first value of any parameters in the <paramref name="text"/>.</param>
            <param name="values">The values of any parameters in the <paramref name="text" /> parameter.</param>
            <returns>The formatted text.</returns>
            <remarks>The method signature is done this way because calling CurrentCulture with no parameters is nearly unintended, since no parameters require formatting. In the rare event where you're formatting a constant value according via CurrentCulture (e.g., <c>{ 1.0:2 }</c>), use the long-form <c>string.Format(CultureInfo.CurrentCulture, text)</c> to achieve the same effect.</remarks>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.EscapeDataString(System.String)">
            <summary>Works around Uri.EscapeDataString's length limits.</summary>
            <param name="dataString">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.GetCulture(System.String)">
            <summary>Attempts to figure out the culture associated with the language code, falling back progressively through parent languages.</summary>
            <param name="languageCode">The language code to try.</param>
            <returns>The nearest CultureInfo possible to the given <paramref name="languageCode"/> or CurrentCulture if nothing is found.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.GetHash(System.Byte[],RobinHood70.CommonCode.HashType)">
            <summary>Gets the requested type of hash for the byte data provided.</summary>
            <param name="data">The byte data.</param>
            <param name="hashType">The type of the hash.</param>
            <returns>The hash, represented as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="hashType"/> is neither Md5 nor Sha1.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.GetHash(System.String,RobinHood70.CommonCode.HashType)">
            <summary>Gets the requested type of hash for the byte data provided.</summary>
            <param name="data">The byte data.</param>
            <param name="hashType">The type of the hash.</param>
            <returns>The hash, represented as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.Initialize">
            <summary>Initializes .NET Core's encoding so that it can load code-page based encodings.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.Invariant(System.FormattableString)">
            <summary>Convenience method so that CurrentCulture and Invariant are all in the same class for both traditional and formattable strings, and are used the same way.</summary>
            <param name="formattable">A formattable string.</param>
            <returns>The formatted text.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="formattable"/> is null.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.PropertyNull(System.String,System.String)">
            <summary>The error thrown when a property of an object was unexpectedly null.</summary>
            <param name="objectName">The name of the object in the original method.</param>
            <param name="propertyName">The property of the object which was found to be null.</param>
            <returns>An <see cref="T:System.InvalidOperationException"/> for the specified object and property.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.Globals.ReadOnlyDictionary``2">
            <summary>Creates an empty read-only dictionary of the specified type.</summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>An empty read-only dictionary.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.IniFile">
            <summary>A class for basic ini file management.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.IniFile.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniFile"/> class.</summary>
            <param name="path">The path of the file to parse.</param>
            <remarks>If <paramref name="path"/> is not a full path, it will be changed into one and have ".ini" appended if necessary.</remarks>
        </member>
        <member name="P:RobinHood70.CommonCode.IniFile.CommentDelimiters">
            <summary>Gets the characters that constitute comment delimiters. Note that at this point, the handling is very simple, so strings like // or /* */ cannot be dealt with.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniFile.Count">
            <summary>Gets the number of sections in the file.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniFile.FileName">
            <summary>Gets the name of the ini file.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniFile.Item(System.Int32)">
            <summary>Gets a section by its offset.</summary>
            <param name="index">The numeric index.</param>
            <returns>The relevant section.</returns>
        </member>
        <member name="P:RobinHood70.CommonCode.IniFile.Item(System.String)">
            <summary>Gets a section by name.</summary>
            <param name="name">The name of the section.</param>
            <returns>The relevant section.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniFile.FindAll(System.String)">
            <summary>Finds all sections with the given name, in the event that there is more than one identically named section.</summary>
            <param name="name">The section name to search for.</param>
            <returns>A list of sections.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniFile.GetEnumerator">
            <summary>Returns an enumerator that iterates through each section.</summary>
            <returns>An enumerator that iterates through each section.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.IniKey">
            <summary>Represents a single ini key.</summary>
        </member>
        <member name="M:RobinHood70.CommonCode.IniKey.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniKey"/> class.</summary>
            <param name="line">The full line of text representing the key.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.IniKey.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniKey"/> class.</summary>
            <param name="line">The full line of text representing the key.</param>
            <param name="allowComments">If set to <c>true</c>, allows trailing comments. Otherwise, the value is assumed to be everything after the equals sign.</param>
            <exception cref="T:System.ArgumentException">Invalid INI line. There is more than one equals sign on the line, or there are no equals signs, and <paramref name="allowComments"/> is false.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.IniKey.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniKey"/> class.</summary>
            <param name="name">The key name.</param>
            <param name="value">The key value.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.IniKey.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniKey"/> class.</summary>
            <param name="name">The key name.</param>
            <param name="value">The key value.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:RobinHood70.CommonCode.IniKey.Name">
            <summary>Gets the key's name.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniKey.Value">
            <summary>Gets the key's value.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniKey.Comment">
            <summary>Gets any trailing comment.</summary>
        </member>
        <member name="T:RobinHood70.CommonCode.IniSection">
            <summary>Represents an ini file's section as a collection of ini keys, along with the section name.</summary>
            <remarks>While this acts similar to a keyed collection, it isn't one due to the fact that keys can be duplicated in a file.</remarks>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.IniSection"/> class.</summary>
            <param name="name">The name.</param>
            <param name="keys">The section's keys.</param>
        </member>
        <member name="P:RobinHood70.CommonCode.IniSection.Count">
            <summary>Gets the number of elements in the collection.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniSection.Name">
            <summary>Gets the section name.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.IniSection.Item(System.Int32)">
            <summary>Gets the ini key at the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:RobinHood70.CommonCode.IniKey"/> at the specified index.</returns>
        </member>
        <member name="P:RobinHood70.CommonCode.IniSection.Item(System.String)">
            <summary>Gets the ini key with the specified name.</summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:RobinHood70.CommonCode.IniKey"/> with the specified name.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.Add(RobinHood70.CommonCode.IniKey)">
            <summary>Adds the specified ini key.</summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.Find(System.String)">
            <summary>Finds all keys with a given name.</summary>
            <param name="name">The name.</param>
            <returns>A list of all keys in this section that have the same name.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.FindAll(System.String)">
            <summary>Finds all keys with a given name.</summary>
            <param name="name">The name.</param>
            <returns>A list of all keys in this section that have the same name.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.Remove(RobinHood70.CommonCode.IniKey)">
            <summary>Removes the specified key.</summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.IniSection.Remove(System.String)">
            <summary>Removes the specified key by name.</summary>
            <param name="name">The name.</param>
            <remarks>In the event that there is more than one key with the same name, all of them will be removed.</remarks>
        </member>
        <member name="T:RobinHood70.CommonCode.NaturalSort">
            <summary>An IComparer that provides natural sorting for mixed text and numeric strings.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.NaturalSort.Instance">
            <summary>Gets a singleton instance of the NaturalSort class.</summary>
            <value>The instance.</value>
        </member>
        <member name="M:RobinHood70.CommonCode.NaturalSort.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
            <summary>Compares two strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <param name="culture">The culture to use for both numeric and string comparisons.</param>
            <param name="options">The <see cref="T:System.Globalization.CompareOptions"/> to use for string comparisons.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
            Less than zero: <paramref name="x" /> is less than <paramref name="y" />.
            Zero: <paramref name="x" /> equals <paramref name="y" />.
            Greater than zero: <paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.NaturalSort.Compare(System.String,System.String)">
            <summary>Compares two strings and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
            Less than zero: <paramref name="x" /> is less than <paramref name="y" />.
            Zero: <paramref name="x" /> equals <paramref name="y" />.
            Greater than zero: <paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.ArrayTooSmall">
            <summary>
              Looks up a localized string similar to Array size is less than the dimensions specified..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.CollectionEmpty">
            <summary>
              Looks up a localized string similar to The collection {0} must contain values; it cannot be null or empty..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.CollectionInvalid">
            <summary>
              Looks up a localized string similar to The collection {0} cannot contain values that are null or only whitespace..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.DuplicateKeyInItems">
            <summary>
              Looks up a localized string similar to Multiple items with the same key were found in the provided collection. Key: {0}.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.InvalidArrayBounds">
            <summary>
              Looks up a localized string similar to Array bounds must be greater than zero..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.NoNodeList">
            <summary>
              Looks up a localized string similar to The LinkedListNode specified does not belong to a list..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.NotAtEnd">
            <summary>
              Looks up a localized string similar to {0} is not at end of data..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.ParameterInvalidCast">
            <summary>
              Looks up a localized string similar to The {0} parameter passed to {1} could not be cast to {2}, as it&apos;s type was {3}..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.PropertyNull">
            <summary>
              Looks up a localized string similar to {0}.{1} was unexpectedly null..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.Resources.StringInvalid">
            <summary>
              Looks up a localized string similar to The parameter {0} cannot be null or only whitespace..
            </summary>
        </member>
        <member name="T:RobinHood70.CommonCode.Properties.ValidatorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.Argument">
            <summary>
              Looks up a localized string similar to Argument.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.CollectionEmptyMessage">
            <summary>
              Looks up a localized string similar to The collection was empty..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.ErrorFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.InfoFormat">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.InvalidCast">
            <summary>
              Looks up a localized string similar to The cast failed..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.NullMessage">
            <summary>
              Looks up a localized string similar to The value was null..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.NullOrEmptyMessage">
            <summary>
              Looks up a localized string similar to The value was null or the collection/string was empty..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.NullOrWhitespaceMessage">
            <summary>
              Looks up a localized string similar to The value(s) were null or contained only whitespace..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.Property">
            <summary>
              Looks up a localized string similar to Property.
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.StringEmptyMessage">
            <summary>
              Looks up a localized string similar to The string was empty..
            </summary>
        </member>
        <member name="P:RobinHood70.CommonCode.Properties.ValidatorMessages.Value">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="T:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2">
            <summary>A read-only version of the KeyedCollection class.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
            <seealso cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2" /> class that uses the default equality comparer.</summary>
            <param name="keyFunc">The function that provides the key for the collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2"/> class that uses the specified equality comparer.</summary>
            <param name="keyFunc">The function that provides the key for the collection.</param>
            <param name="items">The items.</param>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.</param>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <value>The number of elements in the collection.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Comparer">
            <summary>Gets the generic equality comparer that is used to determine equality of keys in the collection.</summary>
            <value>The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface that is used to determine equality of keys in the collection.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the collection.</summary>
            <value>The keys.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Values">
            <summary>Gets an enumerable collection that contains the values in the collection.</summary>
            <value>The values.</value>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Dictionary">
            <summary>Gets the dictionary of items.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.KeyFunction">
            <summary>Gets a function which determines the key for an item.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Items">
            <summary>Gets the list of items.</summary>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Item(`0)">
            <summary>Gets the <typeparamref name="TItem"/> with the specified key.</summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key. If an element with the specified key is not found, an exception is thrown.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key does not exist in the collection.</exception>
        </member>
        <member name="P:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Item(System.Int32)">
            <summary>Gets the <typeparamref name="TItem"/> at the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.Contains(`0)">
            <summary>Determines whether the collection contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2"/> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <param name="key">The key to locate.</param>
            <returns><see langword="true"/> if the read-only dictionary contains an element that has the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>Comparable to <see cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />, attempts to get the value associated with the specified key.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the collection contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:RobinHood70.CommonCode.ReadOnlyKeyedCollection`2.ValueOrDefault(`0)">
            <summary>Returns the value associated with the specified key.</summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key, or <see langword="default"/> if not found.</returns>
        </member>
        <member name="T:RobinHood70.CommonCode.TextArrays">
            <summary>A static class of split values used throughout all related projects. This avoids frequent re-allocations of small array values—particularly important inside loops and frequently-called methods.</summary>
        </member>
        <member name="T:RobinHood70.CommonCode.ValidatedNotNullAttribute">
            <summary>Indicates to Code Analysis that a method validates a particular parameter.</summary>
            <remarks>Identical implementation to https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/Validation/ValidatedNotNullAttribute.cs. </remarks>
        </member>
        <member name="T:RobinHood70.CommonCode.Validator">
            <summary>This class contains some convenient one-off validation tests, as well as instantiators for the multi-test Validator{T} class.</summary>
            <remarks>While these tests can be used in sequence with one another, this will require repeating <c>nameof()</c> and possibly other values with each call. Validator{T} works around these issues, though may be slightly slower due to an increased need to cast the input being tested.</remarks>
        </member>
        <member name="M:RobinHood70.CommonCode.Validator`1.NotNull">
            <summary>Gets a Validator if the provided value is not null.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the value is null.</exception>
        </member>
    </members>
</doc>
